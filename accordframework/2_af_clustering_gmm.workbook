---
uti: com.xamarin.workbook
platforms:
- Console
packages:
- id: Accord.DataSets
  version: 3.5.0
- id: XPlot.Plotly
  version: 1.4.2
- id: Newtonsoft.Json
  version: 9.0.1
- id: Accord.Neuro
  version: 3.5.0
- id: Accord.Audio
  version: 3.5.0
- id: Accord.Vision
  version: 3.5.0
- id: Accord.Statistics
  version: 3.5.0
- id: System.ValueTuple
  version: 4.3.1
- id: Accord
  version: 3.5.0
- id: Accord.MachineLearning
  version: 3.5.0
- id: FSharp.Core
  version: 4.2.1
- id: Accord.IO
  version: 3.5.0
- id: Accord.Video
  version: 3.5.0
- id: Accord.Imaging
  version: 3.5.0
- id: SharpZipLib
  version: 0.86.0
- id: Accord.Math
  version: 3.5.0
---

Clustering (Gausian Mixture Models)

This sample application shows how to use [Gaussian Mixture Models](http://accord-framework.net/docs/html/T_Accord_MachineLearning_GaussianMixtureModel.htm) to perform clustering and classification using soft-decision margins.

```csharp
#r "FSharp.Core"
#r "XPlot.Plotly"

#r "System.Numerics"

#r "Accord"
#r "Accord.IO"
#r "Accord.Math"
#r "Accord.Statistics"
#r "Accord.MachineLearning"
#r "Accord.Neuro"
```

Create some random cluster data

```csharp
using XPlot.Plotly;
using System.Linq;
using Accord.Math;
using Accord.MachineLearning;
using Accord.Statistics.Distributions.Multivariate;


int k = 5;//number of clusters

// Generate data with n Gaussian distributions
double[][][] data = new double[k][][];

for (int i = 0; i < k; i++)
{
    // Create random centroid to place the Gaussian distribution
    double[] mean = Vector.Random(2, -6.0, +6.0);

    // Create random covariance matrix for the distribution
    double[,] covariance = Accord.Statistics.Tools.RandomCovariance(2, -5, 5);

    // Create the Gaussian distribution
    var gaussian = new MultivariateNormalDistribution(mean, covariance);

    int samples = Accord.Math.Random.Generator.Random.Next(150, 250);
    data[i] = gaussian.Generate(samples);
}
//created 5 clusters
data
```

Now we remove clustering info and create a scatterplot of all the random data

```csharp
Random rnd = new Random();

// Join the generated data, and remove cluster info
// what remains is x, y values
double[][] observations = Matrix.Stack(data);

var trace = new Graph.Scatter() 
{
    x = observations.ToList().Select(r => r[0]), 
    y = observations.ToList().Select(r => r[1]), 
    name = $"Mixed",
    mode = "markers", 
    marker = new Graph.Marker() { color = "rgb(100,100,100)", size = 2.0, symbol = "circle", 
        line = new Graph.Line() { color = "rgb(0,0,0)", width = 0.0 }
    }    
};

var layout = new Layout.Layout() { title = "Random Data before Clustering (GMM)", autosize = false, margin = new Graph.Margin() { l = 0, r = 0, b = 0, t = 65 }}; 

var scatterplot = Chart.Plot(trace, layout);  
scatterplot.WithWidth(800); 
scatterplot.WithHeight(500);
scatterplot.GetHtml().AsHtml();
```

Now we use GMM clustering to cluster the data

```csharp
var gmm = new GaussianMixtureModel(k);

// Compute the model
GaussianClusterCollection clustering = gmm.Learn(observations);

// Classify all instances in mixture data
double[] classifications = clustering.Decide(observations).Convert(c => (double)c);
```

No we bring the insert the resulting clusering column to the observation data

```csharp
double[][] results = observations.InsertColumn(classifications);
```

Nex we genarate a scatter plot based on the clustered data

```csharp
Random rnd = new Random();
List<Graph.Scatter> traces = new List<Graph.Scatter>();

var groupedbycluster = (from d in results
                        orderby d[2]
                        group d by d[2] into g
                        select new {cluster = g.Key, data = g.Select(r => new {x = r[0], y = r[1]})});
foreach (var g in groupedbycluster)
{
    string randomcolor = $"rgb({rnd.Next(50, 200)},{rnd.Next(50, 200)},{rnd.Next(50, 200)})";
    var trace = new Graph.Scatter() 
    {
        x = g.data.Select(r => r.x), 
        y = g.data.Select(r => r.y), 
        name = $"Cluster {g.cluster}",
        mode = "markers", 
        marker = new Graph.Marker() 
        { 
            color = randomcolor, size = 5.0, symbol = "circle", 
            line = new Graph.Line() { color = "rgb(0,0,0)", width = 0.0 }
        }    
    };
    traces.Add(trace);
}

var scatterplot = Chart.Plot(traces.ToArray(), layout);  
scatterplot.WithWidth(700); 
scatterplot.WithHeight(500);
scatterplot.GetHtml().AsHtml();
```